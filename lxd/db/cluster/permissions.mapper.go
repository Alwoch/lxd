//go:build linux && cgo && !agent

package cluster

// The code below was generated by lxd-generate - DO NOT EDIT!

import (
	"context"
	"database/sql"
	"fmt"
	"net/http"
	"strings"

	"github.com/canonical/lxd/lxd/auth"
	"github.com/canonical/lxd/lxd/db/query"
	"github.com/canonical/lxd/shared/api"
)

var _ = api.ServerEnvironment{}

var permissionObjects = RegisterStmt(`
SELECT permissions.id, permissions.entitlement, permissions.entity_type, permissions.entity_id
  FROM permissions
  ORDER BY permissions.entitlement, permissions.entity_type, permissions.entity_id
`)

var permissionObjectsByID = RegisterStmt(`
SELECT permissions.id, permissions.entitlement, permissions.entity_type, permissions.entity_id
  FROM permissions
  WHERE ( permissions.id = ? )
  ORDER BY permissions.entitlement, permissions.entity_type, permissions.entity_id
`)

var permissionObjectsByEntityType = RegisterStmt(`
SELECT permissions.id, permissions.entitlement, permissions.entity_type, permissions.entity_id
  FROM permissions
  WHERE ( permissions.entity_type = ? )
  ORDER BY permissions.entitlement, permissions.entity_type, permissions.entity_id
`)

var permissionObjectsByEntityTypeAndEntityID = RegisterStmt(`
SELECT permissions.id, permissions.entitlement, permissions.entity_type, permissions.entity_id
  FROM permissions
  WHERE ( permissions.entity_type = ? AND permissions.entity_id = ? )
  ORDER BY permissions.entitlement, permissions.entity_type, permissions.entity_id
`)

var permissionObjectsByEntityTypeAndEntityIDAndEntitlement = RegisterStmt(`
SELECT permissions.id, permissions.entitlement, permissions.entity_type, permissions.entity_id
  FROM permissions
  WHERE ( permissions.entity_type = ? AND permissions.entity_id = ? AND permissions.entitlement = ? )
  ORDER BY permissions.entitlement, permissions.entity_type, permissions.entity_id
`)

// permissionColumns returns a string of column names to be used with a SELECT statement for the entity.
// Use this function when building statements to retrieve database entries matching the Permission entity.
func permissionColumns() string {
	return "permissions.id, permissions.entitlement, permissions.entity_type, permissions.entity_id"
}

// getPermissions can be used to run handwritten sql.Stmts to return a slice of objects.
func getPermissions(ctx context.Context, stmt *sql.Stmt, args ...any) ([]Permission, error) {
	objects := make([]Permission, 0)

	dest := func(scan func(dest ...any) error) error {
		p := Permission{}
		err := scan(&p.ID, &p.Entitlement, &p.EntityType, &p.EntityID)
		if err != nil {
			return err
		}

		objects = append(objects, p)

		return nil
	}

	err := query.SelectObjects(ctx, stmt, dest, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"permissions\" table: %w", err)
	}

	return objects, nil
}

// getPermissionsRaw can be used to run handwritten query strings to return a slice of objects.
func getPermissionsRaw(ctx context.Context, tx *sql.Tx, sql string, args ...any) ([]Permission, error) {
	objects := make([]Permission, 0)

	dest := func(scan func(dest ...any) error) error {
		p := Permission{}
		err := scan(&p.ID, &p.Entitlement, &p.EntityType, &p.EntityID)
		if err != nil {
			return err
		}

		objects = append(objects, p)

		return nil
	}

	err := query.Scan(ctx, tx, sql, dest, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"permissions\" table: %w", err)
	}

	return objects, nil
}

// GetPermissions returns all available permissions.
// generator: permission GetMany
func GetPermissions(ctx context.Context, tx *sql.Tx, filters ...PermissionFilter) ([]Permission, error) {
	var err error

	// Result slice.
	objects := make([]Permission, 0)

	// Pick the prepared statement and arguments to use based on active criteria.
	var sqlStmt *sql.Stmt
	args := []any{}
	queryParts := [2]string{}

	if len(filters) == 0 {
		sqlStmt, err = Stmt(tx, permissionObjects)
		if err != nil {
			return nil, fmt.Errorf("Failed to get \"permissionObjects\" prepared statement: %w", err)
		}
	}

	for i, filter := range filters {
		if filter.EntityType != nil && filter.EntityID != nil && filter.Entitlement != nil && filter.ID == nil {
			args = append(args, []any{filter.EntityType, filter.EntityID, filter.Entitlement}...)
			if len(filters) == 1 {
				sqlStmt, err = Stmt(tx, permissionObjectsByEntityTypeAndEntityIDAndEntitlement)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"permissionObjectsByEntityTypeAndEntityIDAndEntitlement\" prepared statement: %w", err)
				}

				break
			}

			query, err := StmtString(permissionObjectsByEntityTypeAndEntityIDAndEntitlement)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"permissionObjects\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.EntityType != nil && filter.EntityID != nil && filter.ID == nil && filter.Entitlement == nil {
			args = append(args, []any{filter.EntityType, filter.EntityID}...)
			if len(filters) == 1 {
				sqlStmt, err = Stmt(tx, permissionObjectsByEntityTypeAndEntityID)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"permissionObjectsByEntityTypeAndEntityID\" prepared statement: %w", err)
				}

				break
			}

			query, err := StmtString(permissionObjectsByEntityTypeAndEntityID)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"permissionObjects\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.ID != nil && filter.Entitlement == nil && filter.EntityType == nil && filter.EntityID == nil {
			args = append(args, []any{filter.ID}...)
			if len(filters) == 1 {
				sqlStmt, err = Stmt(tx, permissionObjectsByID)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"permissionObjectsByID\" prepared statement: %w", err)
				}

				break
			}

			query, err := StmtString(permissionObjectsByID)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"permissionObjects\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.EntityType != nil && filter.ID == nil && filter.Entitlement == nil && filter.EntityID == nil {
			args = append(args, []any{filter.EntityType}...)
			if len(filters) == 1 {
				sqlStmt, err = Stmt(tx, permissionObjectsByEntityType)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"permissionObjectsByEntityType\" prepared statement: %w", err)
				}

				break
			}

			query, err := StmtString(permissionObjectsByEntityType)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"permissionObjects\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.ID == nil && filter.Entitlement == nil && filter.EntityType == nil && filter.EntityID == nil {
			return nil, fmt.Errorf("Cannot filter on empty PermissionFilter")
		} else {
			return nil, fmt.Errorf("No statement exists for the given Filter")
		}
	}

	// Select.
	if sqlStmt != nil {
		objects, err = getPermissions(ctx, sqlStmt, args...)
	} else {
		queryStr := strings.Join(queryParts[:], "ORDER BY")
		objects, err = getPermissionsRaw(ctx, tx, queryStr, args...)
	}

	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"permissions\" table: %w", err)
	}

	return objects, nil
}

// GetPermission returns the permission with the given key.
// generator: permission GetOne
func GetPermission(ctx context.Context, tx *sql.Tx, entitlement auth.Entitlement, entityType EntityType, entityID int) (*Permission, error) {
	filter := PermissionFilter{}
	filter.Entitlement = &entitlement
	filter.EntityType = &entityType
	filter.EntityID = &entityID

	objects, err := GetPermissions(ctx, tx, filter)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"permissions\" table: %w", err)
	}

	switch len(objects) {
	case 0:
		return nil, api.StatusErrorf(http.StatusNotFound, "Permission not found")
	case 1:
		return &objects[0], nil
	default:
		return nil, fmt.Errorf("More than one \"permissions\" entry matches")
	}
}
